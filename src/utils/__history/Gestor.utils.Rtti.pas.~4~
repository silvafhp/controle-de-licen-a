unit Gestor.utils.Rtti;

interface

uses
  Gestor.utils.rtti.helper;

type
  iUtilsRtti<T> = interface
    ['{804F282B-ECDD-4D20-9AE2-3C738AAC131A}']
    function EndPoint(var EndPoint : string) : iUtilsRtti<T>;
  end;
  TUtilsRtti<T : class, constructor> = class(TInterfacedObject, iUtilsRtti<T>)
    private
      FInstance : T;
    public
      constructor Create( aInstance : T);
      destructor Destroy; override;
      class function New( aInstance : T) : iUtilsRtti<T>;
      function EndPoint(var EndPoint : string) : iUtilsRtti<T>;
  end;
implementation

uses
  System.TypInfo,
  System.Rtti,
  Gestor.utils.rest.attributes;

{ TUtilsRtti<T> }

constructor TUtilsRtti<T>.Create(aInstance: T);
begin
  FInstance := aInstance;
end;

destructor TUtilsRtti<T>.Destroy;
begin

  inherited;
end;

function TUtilsRtti<T>.EndPoint(var EndPoint: string): iUtilsRtti<T>;
var
  vInfo   : PTypeInfo;
  vCtxRtti: TRttiContext;
  vTypRtti: TRttiType;
begin
  Result := Self;
  vInfo := System.TypeInfo(T);
  vCtxRtti := TRttiContext.Create;
  try
    vTypRtti := vCtxRtti.GetType(vInfo);
    if vTypRtti.Tem<RestData> then
      EndPoint := vTypRtti.GetAttribute<RestData>.EndPoint;
  finally
    vCtxRtti.Free;
  end;
end;

class function TUtilsRtti<T>.New(aInstance: T): iUtilsRtti<T>;
begin
  Result := Self.Create(aInstance);
end;

end.
